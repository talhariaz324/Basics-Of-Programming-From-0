/*
What is Template?
A template is struture which is already generated and we can add anything to it for making that structre.
e.g; ice frozen --> we can add water and froze it, we can add rooh afza and many more things if we want to produce same structure of ice.
Similary, In programming we make algorithms which logic remain same but the dataTypes of the given data changes. Instead of writting the 
same function with diffrent parameters we can go with template.
Template is generic function for all dataTypes.

Resource: testtech129@gmail.com ==> improtant ==> Fareed Folder and then templates
*/

/*
Concept of cpp file, object file and the executable file:

CPP File do compilation and every cpp file will be generated obejct file. NOTE: Header files not create object file
Then Object file generate the executable code and code executed.

Now you can see in templated pdf the generic function template. This template has no existance in memory. But the function which
will be generated by it will place in object file.
Once Compiler generate one type of function then it will use the same int function for the future int params. 
*/


/*
How it works?
When we call the function then first it go the template function and create the desire function which will be called. Template function
has no existance in the memory. Template function decides on the basis of dataType of the params which is passed. This is called as
Implicit Argument Deduction.
And the function which is generated is called as Templated Function (Which is Specific Cpp Type because come from cpp file)

#include<iostream>
using namespace std;
template<typename T>
void mySwap(T & a, T & b){
   T temp = a;
   a = b;
   b =temp;
}

int main() {
    double a = 333, b = 12.5;
    cout<<a<<":"<<b<<endl;
    mySwap(a,b);
    cout<<a<<":"<<b<<endl;
    return 0;
}
*/


/*
Now Sometime we need to use the explicit Argument Deduction.
template<typename T>
void display(T value){
 cout<<value;
}
In that case we just call like display<int>(24.5); // while 45.5 is double dataType but function will be generated or use already generated int function.
OUTPUT: 24
*/

/*
If we have diffrent params mean one int other float... Then
template<typename T>
void mySwap(T  a, T  b){
  
}

int main () {
    mySwap<int>(a,b) // where a is int and b is double...
    here we can pass diffrent paramas by using int. and little bit syntax change of template.
}


// can also fix above problem with the help of below
template<typename T, typename R>
void mySwap(T  a, R  b){
  
}

int main () {
    mySwap(a,b) // where a is int and b is double...
    here a is go for T and b is go for R. So simple..
}



// What if we want to pass two params of template and to use only one param  in function
template<typename T, typename R>
void mySwap(T  a, T  b){
  here we need R not in func params
}

int main () {
    mySwap(a,b) //here error. because we are not using R
    mySwap<int,double>(a,b) // fix the error 
}



// Name of T...
T can be any name. Does not matter. But its scope is to its generic function. But should be capital and Single

Parameter are in defiantion
Argument are in call


*/

// IMPORTANT NOTE: Check Bounds of array first and then do any Manipulation.