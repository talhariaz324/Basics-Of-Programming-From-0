/*
There are 4 types:
1- Volatile Registers (Very Small, Extremely fast, extremely expensive)
2- Volatile Cache (Small, Very fast, expensive)
3- Volatile main memory (Hundreds of MBs of medium-speed, medium-price)
4- non-volatile secondary storage (Hundreds of GBs of slow, cheap)
*/

/*
Purpose of Memory Management:
To ensure fair, secure, orderly and efficient use of memory.
*/

/*
Memory management:
1- Keeping track of used and free memory spaces
2- when, where, and how much memory to allocate and deallocate
3- Swapping processes in and out of main memory
*/

/*
Compile/Assemble => Link => Load => Execute
Lets deep dive:
Source Program -> Compiler/Assembler -> object module -> linkage editor -> load module -> loader -> In-memory (binary memory image)
*/

/*
Address Binding:
1- Binding instructions and data to memory addresses (where will be data in memory)
three types:
Compile time
Load time
Execution time

Compile time: Bind instructions at the compile time. But in this, 
when 1 time it get region in memory then process must reside in the same
memory region for it to execute correctly.

Load time: If the location of a process in memory is not known at compile
time, then the compiler must generate re-locatable code. In this case the
final binding is delayed until load time.
Process can be loaded in different memory regions 
This is also 1 time.

Execution time: If the process can be moved from one memory region to
another during its execution, then binding must be delayed until run time.
Special hardware must be available for this to work.
*/


/*
Logical and Physical Addresses:
Logical address: An address generated by the process/CPU: refers to an
instruction or data in the process.

Physical Address: An address for a main memory location where instruction or
data resides.
*/

/*
Logical and Physical Addresses Space:
The set of all logical addresses generated by a process comprises its logical
address space.

The set of physical addresses corresponding to these logical addresses comprises the
physical address space of the process.
*/

/*
The run-time mapping from logical to physical addresses is done by a piece
of the CPU hardware, called memory management unit.

Example 1:
One common method use is:
The base register is called the relocation register.
The value in the relocation register is added to every address generated
by a user process at the time it is sent to memory.
Explain:
CPU -> logical address (346) -> MMU (14000) this 14000 is the starting address in the memory of the process. -> Physical address (14346) -> Process

Example 2:
Other method is use in intel CPU.
In i8086, the logical address of the next instruction is specified by the
value of instruction pointer. The physical address for the instruction is
computed by shifting the code segment register (CS) left by 4 bits and adding
instruction pointer to it.
Explain:
CPU -> logical address ->  MMU shifting (CS * 2) -> Physical address

Example:
Instruction pointer (16 bit)
IP = 0B10h
CS = D000h

Physical address (20 bit)
CS*2 + IP = D0B10h

*/


/*
Dynamic Loading:
With the dynamic loading, a routine is not loaded into the main memory
until it is called.

All routines are kept on the disk in a re-locatable format.

The main program is loaded into memory and executed.

Advantages:
Potentially less time needed to load a program
Potentially less memory space needed

Disadvantage:
Run time activity


Static Linking: In static linking, system language libraries are linked
at compile time and , like any other object module, are combined by the 
loader into the binary image


Dynamic Linking: In dynamic linking, linking is postponed until runtime.
A library call is replaced by a piece of code, called stub, which is 
used to locate memory-resident library routine at runtime.

Advantages:
Potentially less time needed to load a program
Potentially less memory space needed
Less disk space needed to store binaries 
Updated libraries are used without recompiling a program

Disadvantage:
Time-consuming run-time activity, resulting in slower program execution.

gcc compiler:
Dynamic linking by default
static option allows static linking
*/