/*
Types of OS:

1) Single User OS
        => Only one user use this OS.
        => Allow to interact with computer or with your program
        => Convience to use,,, Giving GUI
2) Batch System
        => In earlier, That time we use TAPE,  Tape is sequential and if we have to move next then we have to be forward the tape.
           So when we have program to execute then firstly we used to get the compiler of language in memory and then loads program
           into memory. So it take time.
        => So we decided to combine all the similar programs tape and then load them into the memory one by one. so this combining is
           discovery of batching system.

        => Currently we are using the batch system where we need results not immediately. Like in Billing of electricity in Lahore.
        We can just combine and then go. So after time  we will get our results. 


3) MultiProgrammed System:
        => Process execution during its execution it may sometime using CPU burst and I/O burst.
        => In Multiprogramming we are utilizing CPU as much as we can.
        => Suppose we have 2 process then first will use CPU and other will use I/O. and when 1st complete then go for I/O. and second one
        go for CPU. This 


4) Time Sharing System:
    => Interactive, Multi User, Multi Process
       It also use file system instead of batch.
       e.g; Linux

5) Real time system
    => This is system which have to response or give output in specific period of time must be.
    => Must be Efficient to give fast response.
    => Two types: Hard Wheel and Soft,
    => Hard is where we must have to give output. Otherwise it will cause major lose.
    => Soft is also necessary to give output fast. But minor lose.



Interrupt, Trap, Signals

Interrupt: is event which is may generated by the I/O device whenever it need CPU. Cpu save the current process state and do the
interrupt given work adn then back to work.

Trap: This is event which is generated by the CPU when it find something dangerous instruction in the process. It terminates the
process and tell the user termination reason.

Signals: This is event which is generated to the running process by the OS. After signal 3 possibilities that a process can do:
1) Either ignore
2) Default happening by OS
3) Something handle by programmer




Protection Issues:
1) Time sharing system, multiple user has multiple process so we have to manage their security.
2) Memory Management etc are also part of this which we will address later.

Protection:
Dual Mode Protection
I/O Protection
Memory Protection
CPU Protection



Dual Mode: We have 2 modes which we handle with mode bits.
0 and 1.
0 means user mode
1 means system mode

user mode has some limitation that it can not use some instructions, these instructions are called as privileged instructions.
privileged instructions are always run in the system mode.


I/O protection: I/O is a privileged instructions so if we are in user mode then it will generate system call which will shift to
kernal/system/privilege mode. OS do work and then control come back to user mode.


Memory Protection: Whenever a process created. It has some memory in main memory which is its legal memory. and the process should
only access its legal memory not other.
For making it possible we have concept of base register and limit register.
Base Register has the smallest address where from the process memory start.
Limit Register has the size of process.
We do check for memory access is that if the CPU generated address is >= base address then it means it is accessing forward to its legal.
But how much forward?
For this has check CPU address should be < Base + Limit Register.... This will ensure that it is behind or within legal memory.





CPU Protection: When multiple processes are running then we want our CPU to give all other proccess as well.
For it we use:
1) Timer with pre determine value like 3
2) Fixed interval which will decrement the timer after its interval.

When 3 decremented to 0 then interrupt will generated and the service routine will shift the CPU from one process to other.
Timer will be set by system because it is privileged instruction and we dont want from user to set it. because user will set
timer acc to his need which is not good.
*/